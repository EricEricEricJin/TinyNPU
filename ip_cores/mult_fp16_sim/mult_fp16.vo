//IP Functional Simulation Model
//VERSION_BEGIN 23.1 cbx_mgl 2024:05:14:18:00:13:SC cbx_simgen 2024:05:14:17:53:42:SC  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Intel disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = lut 61 mux21 11 oper_add 5 oper_mult 1 oper_mux 17 
`timescale 1 ps / 1 ps
module  mult_fp16
	( 
	a,
	areset,
	b,
	clk,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  a;
	input   areset;
	input   [15:0]  b;
	input   clk;
	output   [15:0]  q;

	reg	n0Oi;
	reg	n0Ol;
	reg	n0OO;
	reg	n1i;
	reg	n1O;
	reg	ni0i;
	reg	ni0l;
	reg	ni0O;
	reg	ni1i;
	reg	ni1l;
	reg	ni1O;
	reg	niii;
	reg	niil;
	reg	niiO;
	reg	nil0i;
	reg	nil0l;
	reg	nil0O;
	reg	nil1i;
	reg	nil1l;
	reg	nil1O;
	reg	nili;
	reg	nilii;
	reg	nilil;
	reg	niliO;
	reg	nill;
	reg	nilli;
	reg	nilll;
	reg	nillO;
	reg	nilO;
	reg	nilOi;
	reg	nilOl;
	reg	nilOO;
	reg	niO0i;
	reg	niO0l;
	reg	niO0O;
	reg	niO1i;
	reg	niO1l;
	reg	niO1O;
	reg	niOi;
	reg	niOii;
	reg	niOil;
	reg	niOiO;
	reg	niOl;
	reg	niOli;
	reg	niOll;
	reg	niOO;
	reg	nl0i;
	reg	nl0l;
	reg	nl0O;
	reg	nl1i;
	reg	nl1l;
	reg	nl1O;
	reg	nlii;
	reg	nlil;
	reg	nliO;
	reg	nlli;
	reg	nlll;
	reg	nllO;
	reg	nlOi;
	reg	nlOl;
	reg	nlOO;
	wire	wire_n00i_dataout;
	wire	wire_n00l_dataout;
	wire	wire_n00O_dataout;
	wire	wire_n01i_dataout;
	wire	wire_n01l_dataout;
	wire	wire_n01O_dataout;
	wire	wire_n0ii_dataout;
	wire	wire_n0il_dataout;
	wire	wire_n0iO_dataout;
	wire	wire_n0li_dataout;
	wire	wire_n1OO_dataout;
	wire  [9:0]   wire_n0ll_o;
	wire  [5:0]   wire_n0lO_o;
	wire  [11:0]   wire_n11l_o;
	wire  [11:0]   wire_n1Oi_o;
	wire  [20:0]   wire_n1Ol_o;
	wire  [21:0]   wire_n0i_o;
	wire  wire_nllil_o;
	wire  wire_nlliO_o;
	wire  wire_nllli_o;
	wire  wire_nllll_o;
	wire  wire_nlllO_o;
	wire  wire_nllOi_o;
	wire  wire_nllOl_o;
	wire  wire_nllOO_o;
	wire  wire_nlO0i_o;
	wire  wire_nlO0l_o;
	wire  wire_nlO0O_o;
	wire  wire_nlO1i_o;
	wire  wire_nlO1l_o;
	wire  wire_nlO1O_o;
	wire  wire_nlOii_o;
	wire  wire_nlOil_o;
	wire  wire_nlOiO_o;
	wire  ni0Ol;
	wire  ni0OO;
	wire  nii0i;
	wire  nii0l;
	wire  nii0O;
	wire  nii1i;
	wire  nii1l;
	wire  nii1O;
	wire  niiii;
	wire  niiil;
	wire  niiiO;
	wire  niili;
	wire  niill;
	wire  niilO;
	wire  niiOO;

	initial
	begin
		n0Oi = 0;
		n0Ol = 0;
		n0OO = 0;
		n1i = 0;
		n1O = 0;
		ni0i = 0;
		ni0l = 0;
		ni0O = 0;
		ni1i = 0;
		ni1l = 0;
		ni1O = 0;
		niii = 0;
		niil = 0;
		niiO = 0;
		nil0i = 0;
		nil0l = 0;
		nil0O = 0;
		nil1i = 0;
		nil1l = 0;
		nil1O = 0;
		nili = 0;
		nilii = 0;
		nilil = 0;
		niliO = 0;
		nill = 0;
		nilli = 0;
		nilll = 0;
		nillO = 0;
		nilO = 0;
		nilOi = 0;
		nilOl = 0;
		nilOO = 0;
		niO0i = 0;
		niO0l = 0;
		niO0O = 0;
		niO1i = 0;
		niO1l = 0;
		niO1O = 0;
		niOi = 0;
		niOii = 0;
		niOil = 0;
		niOiO = 0;
		niOl = 0;
		niOli = 0;
		niOll = 0;
		niOO = 0;
		nl0i = 0;
		nl0l = 0;
		nl0O = 0;
		nl1i = 0;
		nl1l = 0;
		nl1O = 0;
		nlii = 0;
		nlil = 0;
		nliO = 0;
		nlli = 0;
		nlll = 0;
		nllO = 0;
		nlOi = 0;
		nlOl = 0;
		nlOO = 0;
	end
	always @ ( posedge clk or  posedge areset)
	begin
		if (areset == 1'b1) 
		begin
			n0Oi <= 0;
			n0Ol <= 0;
			n0OO <= 0;
			n1i <= 0;
			n1O <= 0;
			ni0i <= 0;
			ni0l <= 0;
			ni0O <= 0;
			ni1i <= 0;
			ni1l <= 0;
			ni1O <= 0;
			niii <= 0;
			niil <= 0;
			niiO <= 0;
			nil0i <= 0;
			nil0l <= 0;
			nil0O <= 0;
			nil1i <= 0;
			nil1l <= 0;
			nil1O <= 0;
			nili <= 0;
			nilii <= 0;
			nilil <= 0;
			niliO <= 0;
			nill <= 0;
			nilli <= 0;
			nilll <= 0;
			nillO <= 0;
			nilO <= 0;
			nilOi <= 0;
			nilOl <= 0;
			nilOO <= 0;
			niO0i <= 0;
			niO0l <= 0;
			niO0O <= 0;
			niO1i <= 0;
			niO1l <= 0;
			niO1O <= 0;
			niOi <= 0;
			niOii <= 0;
			niOil <= 0;
			niOiO <= 0;
			niOl <= 0;
			niOli <= 0;
			niOll <= 0;
			niOO <= 0;
			nl0i <= 0;
			nl0l <= 0;
			nl0O <= 0;
			nl1i <= 0;
			nl1l <= 0;
			nl1O <= 0;
			nlii <= 0;
			nlil <= 0;
			nliO <= 0;
			nlli <= 0;
			nlll <= 0;
			nllO <= 0;
			nlOi <= 0;
			nlOl <= 0;
			nlOO <= 0;
		end
		else 
		begin
			n0Oi <= wire_n0i_o[9];
			n0Ol <= wire_n0i_o[10];
			n0OO <= wire_n0i_o[11];
			n1i <= a[9];
			n1O <= nii0O;
			ni0i <= wire_n0i_o[15];
			ni0l <= wire_n0i_o[16];
			ni0O <= wire_n0i_o[17];
			ni1i <= wire_n0i_o[12];
			ni1l <= wire_n0i_o[13];
			ni1O <= wire_n0i_o[14];
			niii <= wire_n0i_o[18];
			niil <= wire_n0i_o[19];
			niiO <= wire_n0i_o[20];
			nil0i <= niliO;
			nil0l <= nilli;
			nil0O <= nilll;
			nil1i <= ni0OO;
			nil1l <= nil1i;
			nil1O <= nilil;
			nili <= wire_n0i_o[21];
			nilii <= nillO;
			nilil <= a[10];
			niliO <= a[11];
			nill <= b[0];
			nilli <= a[12];
			nilll <= a[13];
			nillO <= a[14];
			nilO <= b[1];
			nilOi <= niO1O;
			nilOl <= niO0i;
			nilOO <= niO0l;
			niO0i <= b[11];
			niO0l <= b[12];
			niO0O <= b[13];
			niO1i <= niO0O;
			niO1l <= niOii;
			niO1O <= b[10];
			niOi <= b[2];
			niOii <= b[14];
			niOil <= ni0Ol;
			niOiO <= niOil;
			niOl <= b[3];
			niOli <= (a[15] ^ b[15]);
			niOll <= niOli;
			niOO <= b[4];
			nl0i <= b[8];
			nl0l <= b[9];
			nl0O <= nii0O;
			nl1i <= b[5];
			nl1l <= b[6];
			nl1O <= b[7];
			nlii <= a[0];
			nlil <= a[1];
			nliO <= a[2];
			nlli <= a[3];
			nlll <= a[4];
			nllO <= a[5];
			nlOi <= a[6];
			nlOl <= a[7];
			nlOO <= a[8];
		end
	end
	assign		wire_n00i_dataout = ((~ nili) === 1'b1) ? ni1l : ni1O;
	assign		wire_n00l_dataout = ((~ nili) === 1'b1) ? ni1O : ni0i;
	assign		wire_n00O_dataout = ((~ nili) === 1'b1) ? ni0i : ni0l;
	assign		wire_n01i_dataout = ((~ nili) === 1'b1) ? n0Ol : n0OO;
	assign		wire_n01l_dataout = ((~ nili) === 1'b1) ? n0OO : ni1i;
	assign		wire_n01O_dataout = ((~ nili) === 1'b1) ? ni1i : ni1l;
	assign		wire_n0ii_dataout = ((~ nili) === 1'b1) ? ni0l : ni0O;
	assign		wire_n0il_dataout = ((~ nili) === 1'b1) ? ni0O : niii;
	assign		wire_n0iO_dataout = ((~ nili) === 1'b1) ? niii : niil;
	assign		wire_n0li_dataout = ((~ nili) === 1'b1) ? niil : niiO;
	assign		wire_n1OO_dataout = ((~ nili) === 1'b1) ? n0Oi : n0Ol;
	oper_add   n0ll
	( 
	.a({{3{1'b0}}, wire_n0lO_o[5:0], 1'b1}),
	.b({{5{1'b1}}, {4{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0ll_o));
	defparam
		n0ll.sgate_representation = 0,
		n0ll.width_a = 10,
		n0ll.width_b = 10,
		n0ll.width_o = 10;
	oper_add   n0lO
	( 
	.a({1'b0, nilii, nil0O, nil0l, nil0i, nil1O}),
	.b({1'b0, niO1l, niO1i, nilOO, nilOl, nilOi}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0lO_o));
	defparam
		n0lO.sgate_representation = 0,
		n0lO.width_a = 6,
		n0lO.width_b = 6,
		n0lO.width_o = 6;
	oper_add   n11l
	( 
	.a({{3{(~ wire_n1Ol_o[19])}}, (~ wire_n1Ol_o[18]), (~ wire_n1Ol_o[17]), (~ wire_n1Ol_o[16]), (~ wire_n1Ol_o[15]), (~ wire_n1Ol_o[14]), (~ wire_n1Ol_o[13]), (~ wire_n1Ol_o[12]), (~ wire_n1Ol_o[11]), 1'b1}),
	.b({{11{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n11l_o));
	defparam
		n11l.sgate_representation = 0,
		n11l.width_a = 12,
		n11l.width_b = 12,
		n11l.width_o = 12;
	oper_add   n1Oi
	( 
	.a({{2{wire_n1Ol_o[19]}}, wire_n1Ol_o[19:11], 1'b1}),
	.b({{6{1'b1}}, {5{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1Oi_o));
	defparam
		n1Oi.sgate_representation = 0,
		n1Oi.width_a = 12,
		n1Oi.width_b = 12,
		n1Oi.width_o = 12;
	oper_add   n1Ol
	( 
	.a({{2{wire_n0ll_o[8]}}, wire_n0ll_o[8:1], wire_n0li_dataout, wire_n0iO_dataout, wire_n0il_dataout, wire_n0ii_dataout, wire_n00O_dataout, wire_n00l_dataout, wire_n00i_dataout, wire_n01O_dataout, wire_n01l_dataout, wire_n01i_dataout, wire_n1OO_dataout}),
	.b({{9{1'b0}}, nili, {10{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1Ol_o));
	defparam
		n1Ol.sgate_representation = 0,
		n1Ol.width_a = 21,
		n1Ol.width_b = 21,
		n1Ol.width_o = 21;
	oper_mult   n0i
	( 
	.a({n1O, n1i, nlOO, nlOl, nlOi, nllO, nlll, nlli, nliO, nlil, nlii}),
	.b({nl0O, nl0l, nl0i, nl1O, nl1l, nl1i, niOO, niOl, niOi, nilO, nill}),
	.o(wire_n0i_o));
	defparam
		n0i.sgate_representation = 0,
		n0i.width_a = 11,
		n0i.width_b = 11,
		n0i.width_o = 22;
	oper_mux   nllil
	( 
	.data({1'b1, 1'b0, wire_n1Ol_o[1], 1'b0}),
	.o(wire_nllil_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nllil.width_data = 4,
		nllil.width_sel = 2;
	oper_mux   nlliO
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[2], 1'b0}),
	.o(wire_nlliO_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlliO.width_data = 4,
		nlliO.width_sel = 2;
	oper_mux   nllli
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[3], 1'b0}),
	.o(wire_nllli_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nllli.width_data = 4,
		nllli.width_sel = 2;
	oper_mux   nllll
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[4], 1'b0}),
	.o(wire_nllll_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nllll.width_data = 4,
		nllll.width_sel = 2;
	oper_mux   nlllO
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[5], 1'b0}),
	.o(wire_nlllO_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlllO.width_data = 4,
		nlllO.width_sel = 2;
	oper_mux   nllOi
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[6], 1'b0}),
	.o(wire_nllOi_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nllOi.width_data = 4,
		nllOi.width_sel = 2;
	oper_mux   nllOl
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[7], 1'b0}),
	.o(wire_nllOl_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nllOl.width_data = 4,
		nllOl.width_sel = 2;
	oper_mux   nllOO
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[8], 1'b0}),
	.o(wire_nllOO_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nllOO.width_data = 4,
		nllOO.width_sel = 2;
	oper_mux   nlO0i
	( 
	.data({{2{1'b1}}, wire_n1Ol_o[12], 1'b0}),
	.o(wire_nlO0i_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlO0i.width_data = 4,
		nlO0i.width_sel = 2;
	oper_mux   nlO0l
	( 
	.data({{2{1'b1}}, wire_n1Ol_o[13], 1'b0}),
	.o(wire_nlO0l_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlO0l.width_data = 4,
		nlO0l.width_sel = 2;
	oper_mux   nlO0O
	( 
	.data({{2{1'b1}}, wire_n1Ol_o[14], 1'b0}),
	.o(wire_nlO0O_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlO0O.width_data = 4,
		nlO0O.width_sel = 2;
	oper_mux   nlO1i
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[9], 1'b0}),
	.o(wire_nlO1i_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlO1i.width_data = 4,
		nlO1i.width_sel = 2;
	oper_mux   nlO1l
	( 
	.data({{2{1'b0}}, wire_n1Ol_o[10], 1'b0}),
	.o(wire_nlO1l_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlO1l.width_data = 4,
		nlO1l.width_sel = 2;
	oper_mux   nlO1O
	( 
	.data({{2{1'b1}}, wire_n1Ol_o[11], 1'b0}),
	.o(wire_nlO1O_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlO1O.width_data = 4,
		nlO1O.width_sel = 2;
	oper_mux   nlOii
	( 
	.data({{2{1'b1}}, wire_n1Ol_o[15], 1'b0}),
	.o(wire_nlOii_o),
	.sel({wire_nlOiO_o, wire_nlOil_o}));
	defparam
		nlOii.width_data = 4,
		nlOii.width_sel = 2;
	oper_mux   nlOil
	( 
	.data({{3{1'b0}}, 1'b1}),
	.o(wire_nlOil_o),
	.sel({nii1l, nii1i}));
	defparam
		nlOil.width_data = 4,
		nlOil.width_sel = 2;
	oper_mux   nlOiO
	( 
	.data({{3{1'b0}}, 1'b1, 1'b0, 1'b1, {2{1'b0}}}),
	.o(wire_nlOiO_o),
	.sel({niiii, nii1l, nii1i}));
	defparam
		nlOiO.width_data = 8,
		nlOiO.width_sel = 3;
	assign
		ni0Ol = ((((((((((~ b[0]) & (~ b[1])) & (~ b[2])) & (~ b[3])) & (~ b[4])) & (~ b[5])) & (~ b[6])) & (~ b[7])) & (~ b[8])) & (~ b[9])),
		ni0OO = ((((((((((~ a[0]) & (~ a[1])) & (~ a[2])) & (~ a[3])) & (~ a[4])) & (~ a[5])) & (~ a[6])) & (~ a[7])) & (~ a[8])) & (~ a[9])),
		nii0i = ((~ niiOO) & (~ niiil)),
		nii0l = ((~ niiiO) & (~ niill)),
		nii0O = 1'b1,
		nii1i = ((nii1O & (~ wire_n11l_o[11])) | ((nii0i & niiiO) | ((nii0l & niiil) | (niiiO & niiil)))),
		nii1l = (((~ wire_n1Oi_o[11]) & nii1O) | ((niilO & nii0l) | ((niili & nii0i) | (niilO & niili)))),
		nii1O = (nii0l & nii0i),
		niiii = (((niilO & niiiO) | (niili & niiil)) | ((niill & (~ niOiO)) | (niiOO & (~ nil1l)))),
		niiil = (((((~ nilii) & (~ nil0O)) & (~ nil0l)) & (~ nil0i)) & (~ nil1O)),
		niiiO = (((((~ niO1l) & (~ niO1i)) & (~ nilOO)) & (~ nilOl)) & (~ nilOi)),
		niili = (niill & niOiO),
		niill = ((((niO1l & niO1i) & nilOO) & nilOl) & nilOi),
		niilO = (niiOO & nil1l),
		niiOO = ((((nilii & nil0O) & nil0l) & nil0i) & nil1O),
		q = {((~ niiii) & niOll), wire_nlOii_o, wire_nlO0O_o, wire_nlO0l_o, wire_nlO0i_o, wire_nlO1O_o, wire_nlO1l_o, wire_nlO1i_o, wire_nllOO_o, wire_nllOl_o, wire_nllOi_o, wire_nlllO_o, wire_nllll_o, wire_nllli_o, wire_nlliO_o, wire_nllil_o};
endmodule //mult_fp16
//synopsys translate_on
//VALID FILE
